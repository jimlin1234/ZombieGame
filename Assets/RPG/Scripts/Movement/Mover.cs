using RPG.Combat;
using RPG.Core;
using RPG.Saving;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

namespace RPG.Movement
{
    public class Mover : MonoBehaviour,IAction,ISaveable
    {
        [SerializeField] float maxSpeed = 6f;

        NavMeshAgent navMeshAgent;
        Health health;

        private void Start()
        {
            navMeshAgent = GetComponent<NavMeshAgent>();
            health = GetComponent<Health>();
        }

        void Update()
        {
            if (health.IsDead())
            {
                navMeshAgent.enabled = false; //死亡時關掉navMeshAgent
            }
            
            UpdateAnimator(); //動畫
        }

        public void StartMoveAction(Vector3 destination, float speedFraction)
        {
            GetComponent<ActionScheduler>().StartAction(this);  //告訴ActionScheduler this現在的動作
            //GetComponent<Fighter>().Cancel();
            MoveTo(destination, speedFraction);
        }
        public void MoveTo(Vector3 destination, float speedFraction)
        {
            navMeshAgent.destination = destination;
            navMeshAgent.speed = maxSpeed * Mathf.Clamp01(speedFraction);
            navMeshAgent.isStopped = false;
        }

        public void Cancel() //實作IAction介面的Cancel方法
        {
            navMeshAgent.isStopped = true;
        }

        
        private void UpdateAnimator()
        {
            Vector3 velocity = navMeshAgent.velocity;
            Vector3 localVelocity = transform.InverseTransformDirection(velocity);
            float speed = localVelocity.z;
            GetComponent<Animator>().SetFloat("ForwardSpeed", speed);
        }

        public object CaptureState() //實作ISaveable介面的CaptureState方法
        {
            return new SerializableVector3(transform.position);
        }

        public void RestoreState(object state) //實作ISaveable介面的RestoreState方法
        {
            SerializableVector3 position = (SerializableVector3)state;
            GetComponent<NavMeshAgent>().enabled = false; //關掉NavMeshAgent才能直接設定位置
            transform.position = position.ToVector();
            GetComponent<NavMeshAgent>().enabled = true; //重新啟用NavMeshAgent
        }
    }
}
